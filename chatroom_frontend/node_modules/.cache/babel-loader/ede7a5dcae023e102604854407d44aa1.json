{"ast":null,"code":"var _jsxFileName = \"/Users/krit/Desktop/Workspace/chatroom_frontend/src/components/Chatroom.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { over } from 'stompjs';\nimport SockJS from 'sockjs-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar stompClient = null;\n\nconst ChatRoom = () => {\n  _s();\n\n  const [privateChats, setPrivateChats] = useState(new Map());\n  const [publicChats, setPublicChats] = useState([]);\n  const [userData, setUserData] = useState({\n    username: '',\n    receivername: '',\n    connected: false,\n    message: ''\n  });\n  useEffect(() => {\n    console.log(userData);\n  }, [userData]);\n\n  const connect = () => {\n    let Sock = new SockJS('http://localhost:8080/ws');\n    stompClient = over(Sock);\n    stompClient.connect({}, onConnected, onError);\n  };\n\n  const onConnected = () => {\n    setUserData({ ...userData,\n      \"connected\": true\n    });\n    stompClient.subscribe('/chatroom/public', onMessageReceived);\n    stompClient.subscribe('/user/' + userData.username + '/private', onPrivateMessage);\n    userJoin();\n  };\n\n  const userJoin = () => {\n    var chatMessage = {\n      senderName: userData.username,\n      status: \"JOIN\"\n    };\n    stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n  };\n\n  const onMessageReceived = payload => {\n    var payloadData = JSON.parse(payload.body);\n\n    switch (payloadData.status) {\n      case \"JOIN\":\n        if (!privateChats.get(payloadData.senderName)) {\n          privateChats.set(payloadData.senderName, []);\n          setPrivateChats(new Map(privateChats));\n        }\n\n        break;\n\n      case \"MESSAGE\":\n        publicChats.push(payloadData);\n        setPublicChats([...publicChats]);\n        break;\n    }\n  };\n\n  const onPrivateMessage = payload => {\n    console.log(payload);\n    var payloadData = JSON.parse(payload.body);\n\n    if (privateChats.get(payloadData.senderName)) {\n      privateChats.get(payloadData.senderName).push(payloadData);\n      setPrivateChats(new Map(privateChats));\n    } else {\n      let list = [];\n      list.push(payloadData);\n      privateChats.set(payloadData.senderName, list);\n      setPrivateChats(new Map(privateChats));\n    }\n  };\n\n  const onError = err => {\n    console.log(err);\n  };\n\n  const handleMessage = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"message\": value\n    });\n  };\n\n  const sendValue = () => {\n    if (stompClient) {\n      var chatMessage = {\n        senderName: userData.username,\n        message: userData.message,\n        status: \"MESSAGE\"\n      };\n      console.log(chatMessage);\n      stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n      setUserData({ ...userData,\n        \"message\": \"\"\n      });\n    }\n  };\n\n  const handleUsername = event => {\n    const {\n      value\n    } = event.target;\n    setUserData({ ...userData,\n      \"username\": value\n    });\n  };\n\n  const registerUser = () => {\n    connect();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: userData.connected ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"member-list\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"member CHATROOM active\",\n            children: \"Chatroom\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), tab === \"CHATROOM\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-content\",\n        children: [/*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"chat-messages\",\n          children: publicChats.map((chat, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: `message ${chat.senderName === userData.username && \"self\"}`,\n            children: [chat.senderName !== userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 71\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"message-data\",\n              children: chat.message\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 29\n            }, this), chat.senderName === userData.username && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"avatar self\",\n              children: chat.senderName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 71\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 25\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-message\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"input-message\",\n            placeholder: \"enter the message\",\n            value: userData.message,\n            onChange: handleMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 121,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            className: \"send-button\",\n            onClick: sendValue,\n            children: \"send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 34\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"register\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"user-name\",\n        placeholder: \"Enter your name\",\n        name: \"userName\",\n        value: userData.username,\n        onChange: handleUsername,\n        margin: \"normal\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: registerUser,\n        children: \"connect\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChatRoom, \"L3LhUtXVvNFCh5OxbE96A+UhbRo=\");\n\n_c = ChatRoom;\nexport default ChatRoom;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatRoom\");","map":{"version":3,"names":["React","useEffect","useState","over","SockJS","stompClient","ChatRoom","privateChats","setPrivateChats","Map","publicChats","setPublicChats","userData","setUserData","username","receivername","connected","message","console","log","connect","Sock","onConnected","onError","subscribe","onMessageReceived","onPrivateMessage","userJoin","chatMessage","senderName","status","send","JSON","stringify","payload","payloadData","parse","body","get","set","push","list","err","handleMessage","event","value","target","sendValue","handleUsername","registerUser","tab","map","chat","index"],"sources":["/Users/krit/Desktop/Workspace/chatroom_frontend/src/components/Chatroom.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport {over} from 'stompjs';\nimport SockJS from 'sockjs-client';\n\nvar stompClient =null;\nconst ChatRoom = () => {\n    const [privateChats, setPrivateChats] = useState(new Map());     \n    const [publicChats, setPublicChats] = useState([]); \n    const [userData, setUserData] = useState({\n        username: '',\n        receivername: '',\n        connected: false,\n        message: ''\n      });\n    useEffect(() => {\n      console.log(userData);\n    }, [userData]);\n\n    const connect =()=>{\n        let Sock = new SockJS('http://localhost:8080/ws');\n        stompClient = over(Sock);\n        stompClient.connect({},onConnected, onError);\n    }\n\n    const onConnected = () => {\n        setUserData({...userData,\"connected\": true});\n        stompClient.subscribe('/chatroom/public', onMessageReceived);\n        stompClient.subscribe('/user/'+userData.username+'/private', onPrivateMessage);\n        userJoin();\n    }\n\n    const userJoin=()=>{\n          var chatMessage = {\n            senderName: userData.username,\n            status:\"JOIN\"\n          };\n          stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n    }\n\n    const onMessageReceived = (payload)=>{\n        var payloadData = JSON.parse(payload.body);\n        switch(payloadData.status){\n            case \"JOIN\":\n                if(!privateChats.get(payloadData.senderName)){\n                    privateChats.set(payloadData.senderName,[]);\n                    setPrivateChats(new Map(privateChats));\n                }\n                break;\n            case \"MESSAGE\":\n                publicChats.push(payloadData);\n                setPublicChats([...publicChats]);\n                break;\n        }\n    }\n    \n    const onPrivateMessage = (payload)=>{\n        console.log(payload);\n        var payloadData = JSON.parse(payload.body);\n        if(privateChats.get(payloadData.senderName)){\n            privateChats.get(payloadData.senderName).push(payloadData);\n            setPrivateChats(new Map(privateChats));\n        }else{\n            let list =[];\n            list.push(payloadData);\n            privateChats.set(payloadData.senderName,list);\n            setPrivateChats(new Map(privateChats));\n        }\n    }\n\n    const onError = (err) => {\n        console.log(err);\n        \n    }\n\n    const handleMessage =(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"message\": value});\n    }\n    const sendValue=()=>{\n            if (stompClient) {\n              var chatMessage = {\n                senderName: userData.username,\n                message: userData.message,\n                status:\"MESSAGE\"\n              };\n              console.log(chatMessage);\n              stompClient.send(\"/app/message\", {}, JSON.stringify(chatMessage));\n              setUserData({...userData,\"message\": \"\"});\n            }\n    }\n\n    const handleUsername=(event)=>{\n        const {value}=event.target;\n        setUserData({...userData,\"username\": value});\n    }\n\n    const registerUser=()=>{\n        connect();\n    }\n    return (\n    <div className=\"container\">\n        {userData.connected?\n        <div className=\"chat-box\">\n            <div className=\"member-list\">\n                <ul>\n                    <li  className=\"member CHATROOM active\">Chatroom</li>\n                </ul>\n            </div>\n            {tab===\"CHATROOM\" && <div className=\"chat-content\">\n                <ul className=\"chat-messages\">\n                    {publicChats.map((chat,index)=>(\n                        <li className={`message ${chat.senderName === userData.username && \"self\"}`} key={index}>\n                            {chat.senderName !== userData.username && <div className=\"avatar\">{chat.senderName}</div>}\n                            <div className=\"message-data\">{chat.message}</div>\n                            {chat.senderName === userData.username && <div className=\"avatar self\">{chat.senderName}</div>}\n                        </li>\n                    ))}\n                </ul>\n\n                <div className=\"send-message\">\n                    <input type=\"text\" className=\"input-message\" placeholder=\"enter the message\" value={userData.message} onChange={handleMessage} /> \n                    <button type=\"button\" className=\"send-button\" onClick={sendValue}>send</button>\n                </div>\n            </div>}\n        </div>\n        :\n        <div className=\"register\">\n            <input\n                id=\"user-name\"\n                placeholder=\"Enter your name\"\n                name=\"userName\"\n                value={userData.username}\n                onChange={handleUsername}\n                margin=\"normal\"\n              />\n              <button type=\"button\" onClick={registerUser}>\n                    connect\n              </button> \n        </div>}\n    </div>\n    )\n}\n\nexport default ChatRoom"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAAQC,IAAR,QAAmB,SAAnB;AACA,OAAOC,MAAP,MAAmB,eAAnB;;AAEA,IAAIC,WAAW,GAAE,IAAjB;;AACA,MAAMC,QAAQ,GAAG,MAAM;EAAA;;EACnB,MAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,IAAIO,GAAJ,EAAD,CAAhD;EACA,MAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,EAAD,CAA9C;EACA,MAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC;IACrCY,QAAQ,EAAE,EAD2B;IAErCC,YAAY,EAAE,EAFuB;IAGrCC,SAAS,EAAE,KAH0B;IAIrCC,OAAO,EAAE;EAJ4B,CAAD,CAAxC;EAMAhB,SAAS,CAAC,MAAM;IACdiB,OAAO,CAACC,GAAR,CAAYP,QAAZ;EACD,CAFQ,EAEN,CAACA,QAAD,CAFM,CAAT;;EAIA,MAAMQ,OAAO,GAAE,MAAI;IACf,IAAIC,IAAI,GAAG,IAAIjB,MAAJ,CAAW,0BAAX,CAAX;IACAC,WAAW,GAAGF,IAAI,CAACkB,IAAD,CAAlB;IACAhB,WAAW,CAACe,OAAZ,CAAoB,EAApB,EAAuBE,WAAvB,EAAoCC,OAApC;EACH,CAJD;;EAMA,MAAMD,WAAW,GAAG,MAAM;IACtBT,WAAW,CAAC,EAAC,GAAGD,QAAJ;MAAa,aAAa;IAA1B,CAAD,CAAX;IACAP,WAAW,CAACmB,SAAZ,CAAsB,kBAAtB,EAA0CC,iBAA1C;IACApB,WAAW,CAACmB,SAAZ,CAAsB,WAASZ,QAAQ,CAACE,QAAlB,GAA2B,UAAjD,EAA6DY,gBAA7D;IACAC,QAAQ;EACX,CALD;;EAOA,MAAMA,QAAQ,GAAC,MAAI;IACb,IAAIC,WAAW,GAAG;MAChBC,UAAU,EAAEjB,QAAQ,CAACE,QADL;MAEhBgB,MAAM,EAAC;IAFS,CAAlB;IAIAzB,WAAW,CAAC0B,IAAZ,CAAiB,cAAjB,EAAiC,EAAjC,EAAqCC,IAAI,CAACC,SAAL,CAAeL,WAAf,CAArC;EACL,CAND;;EAQA,MAAMH,iBAAiB,GAAIS,OAAD,IAAW;IACjC,IAAIC,WAAW,GAAGH,IAAI,CAACI,KAAL,CAAWF,OAAO,CAACG,IAAnB,CAAlB;;IACA,QAAOF,WAAW,CAACL,MAAnB;MACI,KAAK,MAAL;QACI,IAAG,CAACvB,YAAY,CAAC+B,GAAb,CAAiBH,WAAW,CAACN,UAA7B,CAAJ,EAA6C;UACzCtB,YAAY,CAACgC,GAAb,CAAiBJ,WAAW,CAACN,UAA7B,EAAwC,EAAxC;UACArB,eAAe,CAAC,IAAIC,GAAJ,CAAQF,YAAR,CAAD,CAAf;QACH;;QACD;;MACJ,KAAK,SAAL;QACIG,WAAW,CAAC8B,IAAZ,CAAiBL,WAAjB;QACAxB,cAAc,CAAC,CAAC,GAAGD,WAAJ,CAAD,CAAd;QACA;IAVR;EAYH,CAdD;;EAgBA,MAAMgB,gBAAgB,GAAIQ,OAAD,IAAW;IAChChB,OAAO,CAACC,GAAR,CAAYe,OAAZ;IACA,IAAIC,WAAW,GAAGH,IAAI,CAACI,KAAL,CAAWF,OAAO,CAACG,IAAnB,CAAlB;;IACA,IAAG9B,YAAY,CAAC+B,GAAb,CAAiBH,WAAW,CAACN,UAA7B,CAAH,EAA4C;MACxCtB,YAAY,CAAC+B,GAAb,CAAiBH,WAAW,CAACN,UAA7B,EAAyCW,IAAzC,CAA8CL,WAA9C;MACA3B,eAAe,CAAC,IAAIC,GAAJ,CAAQF,YAAR,CAAD,CAAf;IACH,CAHD,MAGK;MACD,IAAIkC,IAAI,GAAE,EAAV;MACAA,IAAI,CAACD,IAAL,CAAUL,WAAV;MACA5B,YAAY,CAACgC,GAAb,CAAiBJ,WAAW,CAACN,UAA7B,EAAwCY,IAAxC;MACAjC,eAAe,CAAC,IAAIC,GAAJ,CAAQF,YAAR,CAAD,CAAf;IACH;EACJ,CAZD;;EAcA,MAAMgB,OAAO,GAAImB,GAAD,IAAS;IACrBxB,OAAO,CAACC,GAAR,CAAYuB,GAAZ;EAEH,CAHD;;EAKA,MAAMC,aAAa,GAAGC,KAAD,IAAS;IAC1B,MAAM;MAACC;IAAD,IAAQD,KAAK,CAACE,MAApB;IACAjC,WAAW,CAAC,EAAC,GAAGD,QAAJ;MAAa,WAAWiC;IAAxB,CAAD,CAAX;EACH,CAHD;;EAIA,MAAME,SAAS,GAAC,MAAI;IACZ,IAAI1C,WAAJ,EAAiB;MACf,IAAIuB,WAAW,GAAG;QAChBC,UAAU,EAAEjB,QAAQ,CAACE,QADL;QAEhBG,OAAO,EAAEL,QAAQ,CAACK,OAFF;QAGhBa,MAAM,EAAC;MAHS,CAAlB;MAKAZ,OAAO,CAACC,GAAR,CAAYS,WAAZ;MACAvB,WAAW,CAAC0B,IAAZ,CAAiB,cAAjB,EAAiC,EAAjC,EAAqCC,IAAI,CAACC,SAAL,CAAeL,WAAf,CAArC;MACAf,WAAW,CAAC,EAAC,GAAGD,QAAJ;QAAa,WAAW;MAAxB,CAAD,CAAX;IACD;EACR,CAXD;;EAaA,MAAMoC,cAAc,GAAEJ,KAAD,IAAS;IAC1B,MAAM;MAACC;IAAD,IAAQD,KAAK,CAACE,MAApB;IACAjC,WAAW,CAAC,EAAC,GAAGD,QAAJ;MAAa,YAAYiC;IAAzB,CAAD,CAAX;EACH,CAHD;;EAKA,MAAMI,YAAY,GAAC,MAAI;IACnB7B,OAAO;EACV,CAFD;;EAGA,oBACA;IAAK,SAAS,EAAC,WAAf;IAAA,UACKR,QAAQ,CAACI,SAAT,gBACD;MAAK,SAAS,EAAC,UAAf;MAAA,wBACI;QAAK,SAAS,EAAC,aAAf;QAAA,uBACI;UAAA,uBACI;YAAK,SAAS,EAAC,wBAAf;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA;MADJ;QAAA;QAAA;QAAA;MAAA,QADJ,EAMKkC,GAAG,KAAG,UAAN,iBAAoB;QAAK,SAAS,EAAC,cAAf;QAAA,wBACjB;UAAI,SAAS,EAAC,eAAd;UAAA,UACKxC,WAAW,CAACyC,GAAZ,CAAgB,CAACC,IAAD,EAAMC,KAAN,kBACb;YAAI,SAAS,EAAG,WAAUD,IAAI,CAACvB,UAAL,KAAoBjB,QAAQ,CAACE,QAA7B,IAAyC,MAAO,EAA1E;YAAA,WACKsC,IAAI,CAACvB,UAAL,KAAoBjB,QAAQ,CAACE,QAA7B,iBAAyC;cAAK,SAAS,EAAC,QAAf;cAAA,UAAyBsC,IAAI,CAACvB;YAA9B;cAAA;cAAA;cAAA;YAAA,QAD9C,eAEI;cAAK,SAAS,EAAC,cAAf;cAAA,UAA+BuB,IAAI,CAACnC;YAApC;cAAA;cAAA;cAAA;YAAA,QAFJ,EAGKmC,IAAI,CAACvB,UAAL,KAAoBjB,QAAQ,CAACE,QAA7B,iBAAyC;cAAK,SAAS,EAAC,aAAf;cAAA,UAA8BsC,IAAI,CAACvB;YAAnC;cAAA;cAAA;cAAA;YAAA,QAH9C;UAAA,GAAkFwB,KAAlF;YAAA;YAAA;YAAA;UAAA,QADH;QADL;UAAA;UAAA;UAAA;QAAA,QADiB,eAWjB;UAAK,SAAS,EAAC,cAAf;UAAA,wBACI;YAAO,IAAI,EAAC,MAAZ;YAAmB,SAAS,EAAC,eAA7B;YAA6C,WAAW,EAAC,mBAAzD;YAA6E,KAAK,EAAEzC,QAAQ,CAACK,OAA7F;YAAsG,QAAQ,EAAE0B;UAAhH;YAAA;YAAA;YAAA;UAAA,QADJ,eAEI;YAAQ,IAAI,EAAC,QAAb;YAAsB,SAAS,EAAC,aAAhC;YAA8C,OAAO,EAAEI,SAAvD;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAFJ;QAAA;UAAA;UAAA;UAAA;QAAA,QAXiB;MAAA;QAAA;QAAA;QAAA;MAAA,QANzB;IAAA;MAAA;MAAA;MAAA;IAAA,QADC,gBAyBD;MAAK,SAAS,EAAC,UAAf;MAAA,wBACI;QACI,EAAE,EAAC,WADP;QAEI,WAAW,EAAC,iBAFhB;QAGI,IAAI,EAAC,UAHT;QAII,KAAK,EAAEnC,QAAQ,CAACE,QAJpB;QAKI,QAAQ,EAAEkC,cALd;QAMI,MAAM,EAAC;MANX;QAAA;QAAA;QAAA;MAAA,QADJ,eASM;QAAQ,IAAI,EAAC,QAAb;QAAsB,OAAO,EAAEC,YAA/B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QATN;IAAA;MAAA;MAAA;MAAA;IAAA;EA1BJ;IAAA;IAAA;IAAA;EAAA,QADA;AA0CH,CAxID;;GAAM3C,Q;;KAAAA,Q;AA0IN,eAAeA,QAAf"},"metadata":{},"sourceType":"module"}